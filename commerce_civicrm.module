<?php

/**
 * @file
 * Integrates Drupal Commerce with CiviCRM.
 * Based largely on uc_civicrm, so thanks to dharmatech and AJA for their work
 * there.
 */

/**
 * Implements hook_help().
 */
function commerce_civicrm_help($path = 'admin/help#commerce_civicrm') {
  switch ($path) {
    case 'admin/help#commerce_civicrm':
      return t('This module integrates Drupal Commerce with CiviCRM. When a customer purchases something from the online store, their billing name and address information is added to CiviCRM, while existing contact records are updated.  If the commerce_shipping module is used, their shipping name and address is also recorded in CiviCRM as their "Home" address.  The contact is added to a group and an activity record of type "Purchase" is added to their history.');
  }
}


/**
 * Implements hook_civicrm_tabs().
 */
function commerce_civicrm_civicrm_tabs(&$tabs, $cid) {
  if (!civicrm_initialize()) {
    return;
  }

  $uid = CRM_Core_BAO_UFMatch::getUFId($cid);
  if (empty($uid)) {
    return;
  }

  $customer = user_load($uid);
  $history = commerce_civicrm_display_contact_transactions($customer, FALSE);
  $count = count($history['orders']['#rows']);

  $tab = array(
    'id'     => 'purchases',
    'title'  => t('Purchases'),
    'count'  => $count,
    'weight' => 99,
  );

  if ($count > 0) {
    $tab['url'] = url('admin/commerce/civicrm/customer/orders/' . $uid);
  }
  $tabs[] = $tab;
}


/**
 * Implements hook_menu().
 */
function commerce_civicrm_menu() {
  $items['admin/commerce/civicrm/customer/orders/%user'] = array(
    'title'            => 'CiviCRM',
    'page callback'    => 'commerce_civicrm_display_contact_transactions',
    'page arguments'   => array(5),
    'access arguments' => array('administer CiviCRM'),
    'type'             => MENU_CALLBACK,
  );

  $items['admin/commerce/config/civicrm'] = array(
    'title' => 'CiviCRM',
    'description' => 'Configure Drupal Commerce and CiviCRM integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_civicrm_admin'),
    'access arguments' => array('configure store'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Display order information in a CiviCRM tab.
 *
 * @param $customer
 *   Drupal user object for the customer
 * @param $render
 *   If true, render the output and print it to the screen.
 */
function commerce_civicrm_display_contact_transactions($customer, $render = TRUE) {
  if (!civicrm_initialize()) {
    return;
  }

  $output = _commerce_civicrm_display_customer_orders($customer);
  if ($render) {
    $return = array(
      'content' => render($output),
    );
    print json_encode($return);
  }
  else {
    return $output;
  }

  return;
}


/**
 * Admin form configuration.
 */
function commerce_civicrm_admin() {
  if (!civicrm_initialize()) {
    return;
  }

  $groups = civicrm_api3('Group', 'get', array(
    'sequential' => 1,
    'is_active' => 1,
  ));
  $groups = $groups['values'];

  $options = array();
  foreach ($groups as $group) {
    $options[$group['id']] = $group['title'];
  }
  natsort($options);

  // Get contribution types.
  // Note, no {} on table name because it's in civicrm db.
  $financialTypes = civicrm_api3('FinancialType', 'get', array(
    'sequential' => 1,
    'is_active' => 1,
    'options' => array('limit' => 0),
  ));
  $financialTypes = $financialTypes['values'];
  $types = array(0 => t('Select a type...'));
  foreach ($financialTypes as $fType) {
    $types[$fType['id']] =$fType['name'];
  }

  // Get Price Sets.
  $PriceSetEntity = civicrm_api3('PriceSet', 'get', array(
    'sequential' => 1,
    'is_active' => 1,
    'options' => array('limit' => 0),
  ));
  $PriceSetEntity = $PriceSetEntity['values'];
  $priceSets = array(0 => t('Select a set...'));
  foreach ($PriceSetEntity as $pSet) {
    $priceSets[$pSet['id']] =$pSet['title'];
  }

  $form = array();
  $form['commerce_civicrm_contribution_type'] = array(
    '#type' => 'select',
    '#title' =>  t('Contribution type') . ' <span class="form-required" title="This field is required.">*</span>',
    '#default_value' => variable_get('commerce_civicrm_contribution_type', array()),
    '#options' => $types,
    '#description' => t('Select a contribution type for purchases, making a new type with a name like "Drupal purchase" is recommended.'),
  );

  $form['commerce_civicrm_price_set'] = array(
    '#type' => 'select',
    '#title' => t('Price Set') . ' <span class="form-required" title="This field is required.">*</span>',
    '#default_value' => variable_get('commerce_civicrm_price_set'),
    '#options' => $priceSets,
    '#description' => t('Select a Price Set for purchases, making a new set with a name like "Drupal purchase Set" is recommended.'),
  );

  $form['commerce_civicrm_groups'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Groups to add purchasers to'),
    '#default_value' => variable_get('commerce_civicrm_groups', array()),
    '#options' => $options,
  );

  return system_settings_form($form);
}


/**
 * Called when the user checkout an order
 *
 * @param $order
 */
function commerce_civicrm_action_checkout_complete($order) {

  if (!civicrm_initialize()) {
    return;
  }

  // Find or create a CiviCRM contact ID for the customer.
  $cid = _commerce_civicrm_get_cid($order);
  if ($cid === FALSE) {
    return;
  }

  $cid = _commerce_civicrm_add_update_contact($cid, $order);
  if ($cid === FALSE) {
    return;
  }

  // Add the contribution record.
  _commerce_civicrm_add_contribution($cid, $order);

  // Add this contact to selected groups.
  _commerce_civicrm_add_to_groups($cid);
}

/**
 * Get contact id for the customer.
 *
 * @param $order
 *   Order
 * @return
 *   false|integer false   => an error occured
 *                 integer => CID if non-zero; must create if zero
 */
function _commerce_civicrm_get_cid($order) {
  // Logged in user.
  if ($order->uid) {
    global $user;
    $match = CRM_Core_BAO_UFMatch::synchronizeUFMatch($user, $order->uid, $order->mail, 'Drupal', FALSE, 'Individual');
    if (!is_object($match)) {
      return FALSE;
    }
    return $match->contact_id;
  }

  // Anonymous user.
  // Look in the CiviCRM contacts table for a contact that matches the primary email.
  $params = array(
    'sequential' => 1,
    'email' => $order->mail,
    'return' => 'id',
    'options' => array('limit' => 1)
  );
  $contact = civicrm_api3('Contact', 'get', $params);
  if (!empty($contact['is_error'])) {
    watchdog('commerce_civicrm', '_commerce_civicrm_get_cid() : %error', array('%error' => $contact['error_message']), WATCHDOG_ERROR);
    return FALSE;
  }
  $contact = $contact['values'];

  // No matches found, so we will need to create a contact.
  if (count($contact) == 0) {
    return 0;
  }

  return $contact[0]['id'];
}

/**
 *  Add or update contact information.
 */
function _commerce_civicrm_add_update_contact($cid, $order) {

  if ($cid != 0) {
    $params = array(
      'sequential' => 1,
      'id' => $cid,
      'return' => 'id, source',
      'options' => array('limit' => 1)
    );
    $contact = civicrm_api3('Contact', 'get', $params);
    if (!empty($contact['is_error'])) {
      watchdog('commerce_civicrm', '_commerce_civicrm_add_update_contact(): %error', array('%error' => $contact['error_message']), WATCHDOG_ERROR);
      return FALSE;
    }
    $contact = $contact['values'][0];
  }

  // Get customer profile information.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $billing_profile = $order_wrapper->commerce_customer_billing->value();
  $billing_profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $billing_profile);
  $billing_address = $billing_profile_wrapper->commerce_customer_address->value();

  // If we have a full name field, split it.
  if (!empty($billing_address['name_line'])) {
    // Assumes user only has one first name and one surname... not ideal.
    $names = preg_split('/\s+/', $billing_address['name_line'], 2);
    $first_name = $names[0];
    $last_name = !empty($names[1]) ? $names[1] : '';
  }
  // Otherwise just pull out the first and last names.
  else {
    $first_name = $billing_address['first_name'];
    $last_name = $billing_address['last_name'];
  }

  // Prepare array to update contact via Civi API.
  $contact['last_name'] = $last_name;
  $contact['first_name'] = $first_name;
  $contact['sort_name'] = "{$last_name}, {$first_name}";
  $contact['display_name'] = $billing_address['first_name'] . ' ' . $billing_address['last_name'];
  $contact['contact_type'] = 'Individual';
  $contact['email'] = $order->mail;
  if (empty($contact['source'])) {
    $contact['source'] = 'Drupal Commerce purchase';
  }

  // Create contact or update existing contact.
  $result = civicrm_api3('Contact', 'create', $contact);
  if (!empty($result['is_error'])) {
    watchdog('commerce_civicrm', '_commerce_civicrm_add_update_contact(): %error', array('%error' => $result['error_message']), WATCHDOG_ERROR);
    return FALSE;
  }

  if ($cid == 0)  {
    $cid = $result['id'];
  }

  // Billing location.
  $params = array(
    'contact_id'             => $cid,
    'location_type_id'       => 'Billing',
    'is_primary'             => TRUE,
    'city'                   => $billing_address['locality'],
    'postal_code'            => $billing_address['postal_code'],
    'street_address'         => $billing_address['thoroughfare'],
    'supplemental_address_1' => $billing_address['premise'],
  );

  if ( ($provinceID = checkProvince($billing_address['administrative_area'])) !== false )  {
    $params = array_merge($params, array( 'state_province_id'=> $provinceID));
  }

  if ( ($countryID = checkCountry($billing_address['country'])) !== false )  {
    $params = array_merge($params, array( 'country_id'=> $countryID));
  }

  $new_location = civicrm_api3('Address', 'create', $params);

  // Check if we have shipping information.
  if (!empty($order_wrapper->commerce_customer_shipping)) {
    $shipping_profile = $order_wrapper->commerce_customer_shipping->value();
    $shipping_profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $shipping_profile);
    $shipping_address = $shipping_profile_wrapper->commerce_customer_address->value();

    // Shipping location.
    $params = array(
      'contact_id'             => $cid,
      'location_type_id'       => 'Home',
      'is_primary'             => TRUE,
      'city'                   => $shipping_address['locality'],
      'postal_code'            => $shipping_address['postal_code'],
      'street_address'         => $shipping_address['thoroughfare'],
      'supplemental_address_1' => $shipping_address['premise'],
    );

    if ( ($provinceID = checkProvince($billing_address['administrative_area'])) !== false )  {
      $params = array_merge($params, array( 'state_province_id'=> $provinceID));
    }

    if ( ($countryID = checkCountry($billing_address['country'])) !== false )  {
      $params = array_merge($params, array( 'country_id'=> $countryID));
    }
    // Add / update the location.
    $new_location = civicrm_api3('Address', 'create', $params);
  }

  // Log the error, but continue.
  if (civicrm_error($new_location)) {
    watchdog('commerce_civicrm', '_commerce_civicrm_add_update_contact(): %error', array('%error' => $new_location['error_message']), WATCHDOG_ERROR);
  }

  return $cid;
}

/**
 * Add a contribution record.
 *
 * Create any custom fields and get the transaction id. If it doesn't exist,
 * make one up and add the contribution.
 */
function _commerce_civicrm_add_contribution($cid, &$order) {
  _commerce_civicrm_create_custom_contribution_fields();

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // TODO: how to handle multiple transactions on one order?
  $transactions = commerce_payment_transaction_load_multiple(array(), array('order_id' => $order->order_id));
  $transaction = array_pop($transactions);
  if (empty($transaction)) {
    $txn_id = time() . '_' . rand(1000, 9999);
  }
  else {
    $txn_id = $transaction->transaction_id;
  }

  $total = $order_wrapper->commerce_order_total->amount->value();
  $order_total = $total / 100;

  $tax_field_id = variable_get('commerce_civicrm_tax_field_id', '');
  $shipping_field_id = variable_get('commerce_civicrm_shipping_field_id', '');
  $tax_total = 0;
  $shipping_total = 0;

  // Get the tax total.
  if (module_exists('commerce_tax')) {
    $components = $order_wrapper->commerce_order_total->data->value();
    $tax_total = commerce_tax_total_amount($components['components'], TRUE, commerce_default_currency()) / 100;
  }

  // TODO: figure out where to get the shipping total from.

  if (!empty($order_wrapper->data)) {
    $payment_instrument_id = _commerce_civicrm_map_payment_instrument($order_wrapper->data['payment_method']);
  }
  else {
    $payment_instrument_id = _commerce_civicrm_map_payment_instrument('credit');
  }

  $notes = _commerce_civicrm_create_detail_string($order_wrapper);


  $products = array();
  $financial_type_id = variable_get('commerce_civicrm_contribution_type');

  // get line items and quantities
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      // Extract a product ID and quantity from the line item.
      $line_item_sku = $line_item_wrapper->commerce_product->sku->value();
      $quantity = $line_item_wrapper->quantity->value();
      $unit_price = ($line_item_wrapper->commerce_unit_price->amount->value())/100;
      $title = $line_item_wrapper->commerce_product->title->value();

      $priceFieldID = civicrm_api3('PriceField', 'get', array(
        'sequential' => 1,
        'name' => $line_item_sku,
      ));
      $priceFieldID = $priceFieldID['id'];

      $priceFieldValueID = civicrm_api3('PriceFieldValue', 'get', array(
        'sequential' => 1,
        "price_field_id" => $priceFieldID,
      ));
      $priceFieldValueID = $priceFieldValueID['id'];

      $taxRate = 0;
      $taxRates = CRM_Core_PseudoConstant::getTaxRates();
      if (array_key_exists($financial_type_id, $taxRates)) {
        $taxRate = $taxRates[$financial_type_id];
      }

      // Update the product's quantity value.
      if (empty($products[$priceFieldID])) {
        $products[$priceFieldID] = array(
          'title' => $title,
          'quantity' => $quantity,
          'unit_price' => $unit_price,
          'price_field_value_id' => $priceFieldValueID,
          'tax_rate' => $taxRate,
        );
      }
      else {
        $quantity = $products[$priceFieldID] + $quantity;
        $products[$priceFieldID] = array(
          'title' => $title,
          'quantity' => $quantity,
          'unit_price' => $unit_price,
          'price_field_value_id' => $priceFieldValueID,
          'tax_rate' => $taxRate,
        );
      }
    }
  }

  // build line items API array
  $taxAmountTotal = 0;
  $lineItemsParams = array();
  $i = 0;
  foreach($products as $priceFieldID => $values) {
    $lineTotal = $values['unit_price'] * $values['quantity'];
    $taxAmount = CRM_Contribute_BAO_Contribution_Utils::calculateTaxAmount($lineTotal, $values['tax_rate']);
    $taxAmount = $taxAmount['tax_amount'];

    $lineItemsParams[$i] = array(
      'label' => $values['title'],
      'price_field_id' => $priceFieldID,
      'qty' => $values['quantity'],
      'unit_price' => $values['unit_price'],
      'line_total' => $values['unit_price'] * $values['quantity'],
      'financial_type_id' =>  variable_get('commerce_civicrm_contribution_type'),
      'price_field_value_id' => $values['price_field_value_id'],
      'tax_amount' => $taxAmount,
    );

    $i++;
    $taxAmountTotal += $taxAmount;
  }


  $params = array(
    'contact_id' => $cid,
    'receive_date' => date('Ymd'),
    'total_amount' => $order_total,
    'financial_type_id' => $financial_type_id, // @FIXME this needs a sensible default
    'payment_instrument_id' => $payment_instrument_id,
    'non_deductible_amount' => 00.00,
    'fee_amount' => 00.00,
    'net_amount' => $order_total + $taxAmountTotal,
    'tax_amount' => $taxAmountTotal,
    'trxn_id' => $txn_id,
    'invoice_id' => $order->order_id . '_dc',
    'source' => $notes,
    'contribution_status_id' => _commerce_civicrm_map_contribution_status($order->status),
    'skipLineItem' => 1,
    'api.line_item.create' => $lineItemsParams,
  );
  if (!empty($tax_field_id)) {
    $params['custom_' . $tax_field_id] = $tax_total;
  }
  if (!empty($shipping_field_id)) {
    $params['custom_' . $shipping_field_id] = $shipping_total;
  }

  $contribution = civicrm_api3('Contribution', 'create', $params);

  // Log the error, but continue.
  if (civicrm_error($contribution)) {
    watchdog('commerce_civicrm', '_commerce_civicrm_add_contribution(): %error', array('%error' => $contribution['error_message']), WATCHDOG_ERROR);
  }

  return TRUE;
}

/**
 * Add contact to any specified groups.
 *
 * @param $cid
 *   CRM_Contact_BAO_Group object describing the contact to add
 */
function _commerce_civicrm_add_to_groups($cid) {

  $groups = variable_get('commerce_civicrm_groups', '');
  if (empty($groups)) {
    return;
  }

  foreach ($groups as $id => $key) {
    if ($key != 0) {
      $params = array('contact_id' => $cid, 'group_id' => $key);
      $result = civicrm_api3('GroupContact', 'create', $params);
      if (!empty($result['is_error'])) {
        watchdog('commerce_civicrm', 'Error adding contact to group: %error', array('%error' => $result['error_message']), WATCHDOG_ERROR);
      }
    }
  }
}


/**
 * Creates required contribution fields if they have not already been created.
 */
function _commerce_civicrm_create_custom_contribution_fields() {
  $group_id = variable_get('commerce_civicrm_contribution_group_id', FALSE);
  if ($group_id != FALSE) {
    return;
  }

  // First we need to check if the Sales Tax and Shipping custom fields have
  // already been created.
  $params = array(
    'title'            => 'Drupal Commerce Purchases',
    'name'             => 'commerce_purchases',
    'extends'          => 'Contribution',
    'weight'           => 1,
    'collapse_display' => 0,
    'is_active'        => 1,
  );
  $custom_group = civicrm_api3('CustomGroup', 'create', $params);
  variable_set('commerce_civicrm_contribution_group_id', $custom_group['id']);

  $params = array(
    'custom_group_id' => $custom_group['id'],
    'label'           => 'Sales Tax',
    'html_type'       => 'Text',
    'data_type'       => 'String',
    'weight'          => 1,
    'is_required'     => 0,
    'is_searchable'   => 0,
    'is_active'       => 1,
  );
  $tax_field = civicrm_api3('CustomField', 'create', $params);
  variable_set('commerce_civicrm_tax_field_id', $tax_field['id']);

  $params = array(
    'custom_group_id' => $custom_group['id'],
    'label'           => 'Shipping Cost',
    'html_type'       => 'Text',
    'data_type'       => 'String',
    'weight'          => 2,
    'is_required'     => 0,
    'is_searchable'   => 0,
    'is_active'       => 1,
  );
  $shipping_field = civicrm_api3('CustomField', 'create', $params);
  variable_set('commerce_civicrm_shipping_field_id', $shipping_field['id']);
}

/**
 * Maps a Drupal Commerce payment method to a CiviCRM payment instrument.
 *
 * @param string $payment_method
 *    A Drupal Commerce payment method
 * @return int
 *    The CiviCRM id of the payment processor
 */
function _commerce_civicrm_map_payment_instrument($payment_method) {
  // TODO: not sure where to get this info, defaulting everything to 'credit'.
  $payment_method = 'credit';

  $map = array(
    'credit' => 1,
    'cod'    => 3,
    'check'  => 4,
  );

  if (array_key_exists($payment_method, $map)) {
    $id = $map[$payment_method];
  }
  else {
    $id = 1;
  }

  return $id;
}


/**
 * Maps a Drupal Commerce order status to a corresponding CiviCRM contribution status.
 *
 * @param string $order_status
 *    A Drupal Commerce order status
 * @return int
 *    A CiviCRM order status
 */
function _commerce_civicrm_map_contribution_status($order_status) {
  // NOTE: There may be a more 'correct' way to do this.
  $map = array(
    'completed'         => 1,
    'payment_received'  => 1,
    'pending'           => 2,
    'processing'        => 2,
    'canceled'          => 3,
    'cart'              => 5,
    'checkout_checkout' => 5,
    'checkout_review'   => 5,
    'checkout_payment'  => 5,
    'checkout_complete' => 5,
  );

  if (array_key_exists($order_status, $map)) {
    $id = $map[$order_status];
  }
  // No status mapping found.
  else {
    $id = 1;
    watchdog('commerce_civicrm', 'There is no status that maps to %status marking as "Complete"', array('%status' => $order_status), WATCHDOG_WARNING);
  }

  return $id;
}


/**
 * Create string to insert for purchase activity details.
 */
function _commerce_civicrm_create_detail_string($order_wrapper) {
  $str = '';
  $titles = array();

  // Populate the array of the quantities of the products on the order.
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      // Extract a product ID and quantity from the line item.
      $line_item_sku = $line_item_wrapper->commerce_product->sku->value();
      $quantity = $line_item_wrapper->quantity->value();
      $title = $line_item_wrapper->commerce_product->title->value();

      // Update the product's quantity value.
      if (empty($products[$line_item_sku])) {
        $products[$line_item_sku] = $quantity;
        $titles[$title] = $quantity;
      }
      else {
        $products[$line_item_sku] += $quantity;
        $titles[$title] += $quantity;
      }
    }

  }

  // Display the product titles and the number purchased.
  if (!empty($titles)) {
    $strings = array();
    foreach ($titles as $title => $quantity) {
      $strings[] = $title . ' x ' . $quantity;
    }
    $str = implode(', ', $strings);
  }

  return $str;
}


/**
 * Displays a list of orders made by a customer.
 *
 * @param $customer
 *   The user object for the customer.
 */
function _commerce_civicrm_display_customer_orders($customer) {
  $result = db_select('commerce_order')->extend('PagerDefault')
    ->fields('commerce_order', array('order_id'))
    ->condition('uid', $customer->uid)
    ->orderBy('created', 'DESC')
    ->limit(50)
    ->execute();
  $order_ids = $result->fetchCol();
  $orders = commerce_order_load_multiple($order_ids);

  $header = array(t('Order ID'), t('Date'), t('Billing name'),
    t('Shipping name'), t('Items'), t('Total'), t('Operations'));
  $rows = array();
  $totals = array('orders' => 0, 'items' => 0, 'total' => 0);
  $currency = '';
  foreach ($orders as $order) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Get billing details.
    $billing_profile = $order_wrapper->commerce_customer_billing->value();
    $billing_profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $billing_profile);
    $billing_address = $billing_profile_wrapper->commerce_customer_address->value();
    $billing_name = (empty($billing_address['name_line']) ? $billing_address['first_name'] . ' ' . $billing_address['last_name'] : $billing_address['name_line']);

    // Get shipping details.
    $shipping_name = '';
    if (!empty($order_wrapper->commerce_customer_shipping)) {
      $shipping_profile = $order_wrapper->commerce_customer_shipping->value();
      $shipping_profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $shipping_profile);
      $shipping_address = $shipping_profile_wrapper->commerce_customer_address->value();
      $shipping_name = (empty($shipping_address['name_line']) ? $shipping_address['first_name'] . ' ' . $shipping_address['last_name'] : $shipping_address['name_line']);
    }

    $operations = l('View', 'admin/commerce/orders/' . $order->order_id);
    $operations .= ' ';
    $operations .= l('Edit', 'admin/commerce/orders/' . $order->order_id . '/edit');

    // Update summary stats.
    $quantity = 0;
    if (!empty($order_wrapper->commerce_line_items)) {
      $quantity = commerce_line_items_quantity($order_wrapper->commerce_line_items, commerce_product_line_item_types());
    }
    $totals['items'] += $quantity;
    $totals['orders'] += 1;

    // Order total.
    $currency = $order_wrapper->commerce_order_total->currency_code->value();
    $total = $order_wrapper->commerce_order_total->amount->value();
    $totals['total'] += $total;

    $rows[] = array(
      'data' => array(
        array('data' => $order->order_id),
        array('data' => format_date($order->created)),
        array('data' => check_plain($billing_name)),
        array('data' => check_plain($shipping_name)),
        array('data' => $quantity),
        array('data' => commerce_currency_format($total, $currency)),
        array('data' => $operations),
      ),
      'id' => 'order-' . $order->order_id,
    );
  }

  $build = array();

  $build['description'] = array(
    '#markup' => '<p>' . t('!totals_orders orders shown match that account with !totals_items items purchased and !totals_total spent:', array(
        '!totals_orders' => $totals['orders'],
        '!totals_items' => $totals['items'],
        '!totals_total' => commerce_currency_format($totals['total'], $currency),
      )) . '</p>',
    '#weight' => -5,
  );
  $build['orders'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#attributes' => array('width' => '100%', 'class' => array('commerce-cust-orders-table')),
    '#empty' => t('No orders found.'),
  );
  $build['pager'] = array(
    '#theme' => 'pager',
    '#weight' => 5,
  );

  return $build;
}

function checkCountry($country)  {
  if (!empty($country))  {
    $allCountries = CRM_Core_PseudoConstant::countryIsoCode();
    $result = civicrm_api3('Setting', 'get', array(
      'sequential' => 1,
      'return' => "countryLimit",
    ));
    $countryLimit = $result['values'][0]['countryLimit'];
    $checkCountry = array_search($country, $allCountries);
    if ($checkCountry !== false && in_array($checkCountry, $countryLimit))  {
      return $checkCountry;
    }
  }
  return false;
}

function checkProvince($province)  {
  if (!empty($province))  {
    $allProvinces = CRM_Core_PseudoConstant::stateProvinceAbbreviation();
    $checkProvince = array_search($province, $allProvinces);
    if ($checkProvince !== false)  {
      return $checkProvince;
    }
  }
  return false;
}

/**
 * Called when the user update an existing order
 *
 * @param $order
 */
function commerce_civicrm_action_order_update($order)  {
  // initialize civicrm
  if (!civicrm_initialize()) {
    return;
  }

  _commerce_civicrm_update_contribution($order);
}

/**
 * Update existing contribution and related line items
 * when the related order get updated
 *
 * @param $order
 */
function _commerce_civicrm_update_contribution($order) {
  // get the corresponding contribution ID to the order that get updated
  $contributionEntity = civicrm_api3('Contribution', 'get', array(
    'sequential' => 1,
    'return' => "id",
    'invoice_id' => $order->order_id . "_dc",
  ));

  if (empty($contributionEntity['id']))  {
    return;
  }

  $contributionID = $contributionEntity['id'];
  // update contact data
  $cid = _commerce_civicrm_get_cid($order);
  if ($cid !== FALSE) {
    _commerce_civicrm_add_update_contact($cid, $order);
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // get the total amount after updaing the order
  $total = $order_wrapper->commerce_order_total->amount->value();
  $order_total = $total / 100;

  $tax_field_id = variable_get('commerce_civicrm_tax_field_id', '');
  $shipping_field_id = variable_get('commerce_civicrm_shipping_field_id', '');
  $tax_total = 0;
  $shipping_total = 0;

  // Get the tax total.
  if (module_exists('commerce_tax')) {
    $components = $order_wrapper->commerce_order_total->data->value();
    $tax_total = commerce_tax_total_amount($components['components'], TRUE, commerce_default_currency()) / 100;
  }

  $notes =  _commerce_civicrm_create_detail_string($order_wrapper);

  $products = array();
  $financial_type_id = variable_get('commerce_civicrm_contribution_type');

  // get line items and quantities
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      // Extract a product ID and quantity from the line item.
      $line_item_sku = $line_item_wrapper->commerce_product->sku->value();
      $quantity = $line_item_wrapper->quantity->value();
      $unit_price = ($line_item_wrapper->commerce_unit_price->amount->value())/100;
      $title = $line_item_wrapper->commerce_product->title->value();

      $priceFieldID = civicrm_api3('PriceField', 'get', array(
        'sequential' => 1,
        'name' => $line_item_sku,
      ));
      $priceFieldID = $priceFieldID['id'];

      $priceFieldValueID = civicrm_api3('PriceFieldValue', 'get', array(
        'sequential' => 1,
        "price_field_id" => $priceFieldID,
      ));
      $priceFieldValueID = $priceFieldValueID['id'];

      $taxRate = 0;
      $taxRates = CRM_Core_PseudoConstant::getTaxRates();
      if (array_key_exists($financial_type_id, $taxRates)) {
        $taxRate = $taxRates[$financial_type_id];
      }

      // Update the product's quantity value.
      if (empty($products[$priceFieldID])) {
        $products[$priceFieldID] = array(
          'title' => $title,
          'quantity' => $quantity,
          'unit_price' => $unit_price,
          'price_field_value_id' => $priceFieldValueID,
          'tax_rate' => $taxRate,
        );
      }
      else {
        $quantity = $products[$priceFieldID] + $quantity;
        $products[$priceFieldID] = array(
          'title' => $title,
          'quantity' => $quantity,
          'unit_price' => $unit_price,
          'price_field_value_id' => $priceFieldValueID,
          'tax_rate' => $taxRate,
        );
      }
    }
  }

  // get this contribution line items
  $currentLineItems = civicrm_api3('LineItem', 'get', array(
    'sequential' => 1,
    'contribution_id' => $contributionID,
    'return' => "id,price_field_id",
    'options' => array('limit' => 0),
  ));

  $currentLineItems = $currentLineItems['values'];
  foreach($currentLineItems as $lineItem) {
    if (empty($products[$lineItem['price_field_id']])) {
      civicrm_api3('LineItem', 'delete', array(
        'id' => $lineItem['id'],
      ));
    } else  {
      $products[$lineItem['price_field_id']]['id'] = $lineItem['id'];
    }
  }

  // build line items API array
  $taxAmountTotal = 0;
  $lineItemsParams = array();
  $i = 0;
  foreach($products as $priceFieldID => $values) {
    $lineTotal = $values['unit_price'] * $values['quantity'];
    $taxAmount = CRM_Contribute_BAO_Contribution_Utils::calculateTaxAmount($lineTotal, $values['tax_rate']);
    $taxAmount = $taxAmount['tax_amount'];

    $lineItemsParams[$i] = array(
      'label' => $values['title'],
      'price_field_id' => $priceFieldID,
      'qty' => $values['quantity'],
      'unit_price' => $values['unit_price'],
      'line_total' => $values['unit_price'] * $values['quantity'],
      'financial_type_id' =>  variable_get('commerce_civicrm_contribution_type'),
      'price_field_value_id' => $values['price_field_value_id'],
      'tax_amount' => $taxAmount,
    );

    if(!empty($values['id']))  {
      $lineItemsParams[$i] = array_merge($lineItemsParams[$i], array('id' => $values['id']));
    }

    $i++;
    $taxAmountTotal += $taxAmount;
  }

  $cid = _commerce_civicrm_get_cid($order);

  $params = array(
    'id' => $contributionID,
    'contact_id' => $cid,
    'total_amount' => $order_total,
    'net_amount' => $order_total + $taxAmountTotal,
    'tax_amount' => $taxAmountTotal,
    'source' => $notes,
    'contribution_status_id' => _commerce_civicrm_map_contribution_status($order->status),
    'skipLineItem' => 1,
    'api.line_item.create' => $lineItemsParams,
  );
  if (!empty($tax_field_id)) {
    $params['custom_' . $tax_field_id] = $tax_total;
  }
  if (!empty($shipping_field_id)) {
    $params['custom_' . $shipping_field_id] = $shipping_total;
  }

  $contribution = civicrm_api3('Contribution', 'create', $params);

  // Log the error, but continue.
  if (civicrm_error($contribution)) {
    watchdog('commerce_civicrm', '_commerce_civicrm_add_contribution(): %error', array('%error' => $contribution['error_message']), WATCHDOG_ERROR);
  }

  // Log the error
  if (civicrm_error($contribution)) {
    watchdog('commerce_civicrm', 'commerce_civicrm_action_order_update(): %error', array('%error' => $contribution['error_message']), WATCHDOG_ERROR);
  }
}

/**
 * Called when the user deleted an order
 *
 * @param $order
 */
function commerce_civicrm_action_order_delete($order)
{
  // initialize civicrm
  if (!civicrm_initialize()) {
    return;
  }

  _commerce_civicrm_cancel_civicrm_contribution($order);
}

/**
 * set the status of civicrm contribution to 'canceled'
 * when the related order get deleted.
 *
 * @param $order
 */
function _commerce_civicrm_cancel_civicrm_contribution($order) {
  // get the corresponding contribution ID to the order that get updated
  $contributionEntity = civicrm_api3('Contribution', 'get', array(
    'sequential' => 1,
    'return' => "id",
    'invoice_id' => $order->order_id . "_dc",
  ));

  if (!empty($contributionEntity['id']))  {
    $contributionID = $contributionEntity['id'];

    $contribution = civicrm_api3('Contribution', 'create', array(
      'id' => $contributionID,
      'contribution_status_id' => _commerce_civicrm_map_contribution_status('canceled'),
    ));

    // Log the error
    if (civicrm_error($contribution)) {
      watchdog('commerce_civicrm', 'commerce_civicrm_action_order_delete(): %error', array('%error' => $contribution['error_message']), WATCHDOG_ERROR);
    }
  }
}

/**
 * Called when the user create a new product
 *
 * @param $product
 */
function commerce_civicrm_action_product_insert($product)
{
  // initialize civicrm
  if (!civicrm_initialize()) {
    return;
  }

  // add new civicrm price field for the created product
  _commerce_civicrm_add_update_pricefield($product);
}

/**
 * Called when the user update a product
 *
 * @param $product
 */
function commerce_civicrm_action_product_update($product) {
  // initialize civicrm
  if (!civicrm_initialize()) {
    return;
  }

  // update civicrm price field for the updated product
  _commerce_civicrm_add_update_pricefield($product);
}

/**
 * insert/update civicrm price field when creating/updating
 * a drupal commerce product.
 *
 * @param $product
 */
function _commerce_civicrm_add_update_pricefield($product)  {
  // get the total product price
  $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
  $total = $product_wrapper->commerce_price->amount->value();
  $productUnitPrice = $total / 100;

  $params = array(
    'sequential' => 1,
    'label' => $product->title,
    'name' => $product->sku,
    'price_set_id' => variable_get('commerce_civicrm_price_set'),
    'is_active' => 1,
    'is_required' => 0,
    'html_type' => "Text",
    'is_display_amounts' => 1,
    'visibility_id' => "public",
    'option_amount' => array( 1 => $productUnitPrice),
    'option_label' => array( 1 => $product->title),
    'option_weight' =>  array( 1 => 1),
    'option_description' => $product->sku,
    'financial_type_id' => variable_get('commerce_civicrm_contribution_type'),
  );

  if (!empty($product->original->sku))  {
    // get the price field ID if exist ( for update )
    $priceField = civicrm_api3('PriceField', 'get', array(
      'sequential' => 1,
      'name' => $product->original->sku, // we use other original sku in case it's changed
    ));

    if (!empty($priceField['id']))  {
      $params['id'] = $priceField['id'];
    }

    // create price field for the product
    $priceField = civicrm_api3('PriceField', 'create', $params);

    // Log the error if there is one
    if (civicrm_error($priceField)) {
      watchdog('commerce_civicrm', 'commerce_civicrm_action_product_civicrm_pricefield(): %error', array('%error' => $priceField['error_message']), WATCHDOG_ERROR);
    }
  }

}


/**
 * Called when the user delete a product
 *
 * @param $product
 */
function commerce_civicrm_action_product_delete($product) {
  // initialize civicrm
  if (!civicrm_initialize()) {
    return;
  }

  _commerce_civicrm_disable_price_field($product->sku);
}

/**
 * disable the price field when the corresponding product
 * get deleted on drupal side.
 *
 * @param $productSKU
 */
function _commerce_civicrm_disable_price_field($productSKU) {
  $priceField = civicrm_api3('PriceField', 'get', array(
    'sequential' => 1,
    'name' => $productSKU,
  ));

  if (!empty($priceField['id']))  {
    civicrm_api3('PriceField', 'get', array(
      'id' => $priceField['id'],
      'is_active' => 0,
    ));
  }
}
